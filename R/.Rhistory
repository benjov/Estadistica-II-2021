class("a")
class("R">"Python"); "R" > "Python"; 5<2
class(2); class(as.integer(2)); class("2")
ObjetoGuardado <- c(1,2,3,5,7,11,13,17)
print(ObjetoGuardado)
ObjetoGuardado
ObjetoGuardado+5
ObjetoGuardado + 5
ObjetoGuardado + 5
ObjetoGuardado + 5
ObjetoGuardado*5
ObjetoGuardado**(1/2)
log(ObjetoGuardado)
exp(ObjetoGuardado)
round(exp(ObjetoGuardado), 2)
ls() # "ls" lista todos los elementos contenidos en Global Enviroment
class(ObjetoGuardado)
I <- c(1, 1, 1, 1, 1, 1,1,1)
ObjetoGuardado %*% I # Producto punto entre vectores
ListaGuardada <- list(c("Omar", "José"), c(24,29), c(TRUE, FALSE))
ListaGuardada
class(ListaGuardada)
M_object <-matrix(ObjetoGuardado, nrow = 3, ncol=2) #Generamos una matriz a partir del vector
ObjetoGuardado <- c(1,2,3,5,7,11,13,17,10)
print(ObjetoGuardado)
ObjetoGuardado
ObjetoGuardado + 5
ObjetoGuardado*5
ObjetoGuardado**(1/2)
log(ObjetoGuardado)
exp(ObjetoGuardado)
round(exp(ObjetoGuardado), 2)
ls() # "ls" lista todos los elementos contenidos en Global Enviroment
class(ObjetoGuardado)
I <- c(1, 1, 1, 1, 1, 1,1,1)
ObjetoGuardado %*% I # Producto punto entre vectores
I <- c(1, 1, 1, 1, 1, 1, 1, 1, 1)
ObjetoGuardado %*% I # Producto punto entre vectores
ListaGuardada <- list(c("Omar", "José"), c(24,29), c(TRUE, FALSE))
ListaGuardada
class(ListaGuardada)
M_object <-matrix(ObjetoGuardado, nrow = 3, ncol = 3) #Generamos una matriz a partir del vector
diagonal <- diag(3) #Generamos una matríz identidad de 3*3
M_object
diagonal <- diag(3) #Generamos una matríz identidad de 3*3
diagonal
M_object%*%diagonal #¿Por qué no imprime el resultado?
t(M_object)%*%diagonal #¿Por qué esta sí funciona?
solve(M_object) #Matriz inversa
M_object%*%solve(M_object)
miData = data.frame(ListaGuardada) #Generamos un DataFrame a partir del objeto clase lista
miData #Imprimimos
miData #Imprimimos
names(miData) = c("Nombre", "Edad", "PEA")#Le damos nombre a las columnas
miData #Imprimimos
sum(ObjetoGuardado)
mean(ObjetoGuardado)
sd(ObjetoGuardado)
?sample
###Las funciones necesitan ARGUMENTOS, en el caos siguiente el argumento es el tamaño de la muestra
sample(ObjetoGuardado, 3, replace = FALSE)
###Las funciones necesitan ARGUMENTOS, en el caos siguiente el argumento es el tamaño de la muestra
sample(ObjetoGuardado, 3, replace = FALSE)
###Las funciones necesitan ARGUMENTOS, en el caos siguiente el argumento es el tamaño de la muestra
sample(ObjetoGuardado, 10, replace = FALSE)
###Las funciones necesitan ARGUMENTOS, en el caos siguiente el argumento es el tamaño de la muestra
sample(ObjetoGuardado, 9, replace = FALSE)
###Las funciones necesitan ARGUMENTOS, en el caos siguiente el argumento es el tamaño de la muestra
sample(ObjetoGuardado, 10, replace = TRUE)
###Las funciones necesitan ARGUMENTOS, en el caos siguiente el argumento es el tamaño de la muestra
sample(ObjetoGuardado, 3, replace = FALSE)
sample(ObjetoGuardado, 10, replace = TRUE)
count(ObjetoGuardado)
coun(ObjetoGuardado)
length(ObjetoGuardado)
###Las funciones necesitan ARGUMENTOS, en el caos siguiente el argumento es el tamaño de la muestra
?sample
sample(ObjetoGuardado, 3, replace = FALSE)
sample(ObjetoGuardado, 10, replace = TRUE)
###Para conocer los argumentos d euna función, se puede utilizar args()
args(sample)
ObjetoGuardado
?sort
sort(ObjetoGuardado)
ObjetoGuardado[1:2]
ObjetoGuardado[4:9]
ObjetoGuardado[9]
ObjetoGuardado[8,9]
ObjetoGuardado[c(8,9)]
M_object[1]
M_object[9]
M_object
M_object[2:3]
M_object[3:5]
M_object[c(2,3)]
M_object[ , 3]
miData
miData['Nombre']
miData[2]
miData[1:2]
miData['Nombre'][1]
miData[2, 'Nombre']
sort(ObjetoGuardado)
###probar funcion
m_podada(sort(ObjetoGuardado),2)
x = x[ (n+1) : (N-n) ]
###Funciones creadas
m_podada <- function(x, n){
# Funcion de la media podada
N = length(x)
x = x[ (n+1) : (N-n) ]
sum(x) / length(x)
}
###probar funcion
m_podada(sort(ObjetoGuardado),2)
###Como alternativa podemos usar bibliotecas que contengan un proceso como el que ocuparemos
install.packages("AER")
library(AER)
# Con  Dependencias
library(car)
library(carData)
library(lmtest)
library(zoo)
library(sandwich)
library(survival)
library(AER)
plot(ObjetoGuardado)
plot(C)
?plor
?plot
plot(ObjetoGuardado, type = "l")
### Librería para descargar series financieras y graficarlas
install.packages("quantmod")
install.packages("highcharter")
install.packages("ggplot2")
library(quantmod)
library(xts)
library(TTR)
library(quantmod)
library(highcharter)
library(ggplot2)
### Descargamos la serie de las acciones de Amazon
getSymbols("AMZN")
options("getSymbols.warning4.0" = FALSE)
### Descargamos la serie de las acciones de Amazon
getSymbols("AMZN")
head(AMZN, 2)
### Gráfico
hchart(AMZN)
### Descargamos la serie de las acciones de Amazon
getSymbols("NDAQ")
head(AMZN, 2)
### Descargamos la serie de Nasdaq
getSymbols("NDAQ")
head(AMZN, 2)
### Gráfico
hchart(NDAQ)
## construir scatter plot de ambas series
class(AMZN)
### Análisis exploratorio de datos
qplot(x=NASDAQQ, y=AMZNN)+
geom_smooth()
### Análisis exploratorio de datos
qplot(x=NASDAQ, y=AMZN)+
geom_smooth()
, y=AMZN)+
geom_smooth()
NDAQ$NDAQ.Close
miData$Edad
### Análisis exploratorio de datos
ggplot() +
geom_point(aes(y = AMZN, y=AMZNN, alpha=0.05))+
geom_smooth(aes(x=NASDAQQ, y=AMZNN), se=FALSE)+
labs(title="Gráfico de dispersión AMZN~NDAQ")
### Análisis exploratorio de datos
ggplot() +
geom_point(aes(y = AMZN, y = NDAQ, alpha=0.05))+
geom_smooth(aes(x=NASDAQQ, y=AMZNN), se=FALSE)+
labs(title="Gráfico de dispersión AMZN~NDAQ")
### Análisis exploratorio de datos
ggplot() +
geom_point(aes(y = AMZN, y = NDAQ, alpha = 0.05))+
geom_smooth(aes(y = AMZN, y = NDAQ), se = FALSE)+
labs(title="Gráfico de dispersión AMZN~NDAQ")
### Análisis exploratorio de datos
ggplot() +
geom_point(aes(y = AMZN$AMZN.Close, y = NDAQ$NDAQ.Close, alpha = 0.05)) +
geom_smooth(aes(y = AMZN$AMZN.Close, y = NDAQ$NDAQ.Close), se = FALSE) +
labs(title="Gráfico de dispersión AMZN~NDAQ")
miData
### Análisis exploratorio de datos con GGPLOT
ggplot(data = miData, aes(x = Nombre, y = Edad)) +
geom_line(color = "red") +
geom_point()
### Análisis exploratorio de datos con GGPLOT
ggplot(data = miData) +
geom_line(aes(x = Nombre, y = Edad), color = "red") +
geom_point()
, group=1
### Análisis exploratorio de datos con GGPLOT
ggplot(data = miData, aes(x = Nombre, y = Edad, group=1)) +
geom_line(color="red")+
geom_point()
### Análisis exploratorio de datos con GGPLOT
ggplot(data = miData, aes(x = Nombre, y = Edad, group = 1)) +
geom_line(color = "red") + geom_point(color = "blue")
#
ggplot(data = miData, aes(x = Nombre, y = Edad)) +
geom_line(color = "red") + geom_point(color = "blue")
#
ggplot(miData, aes(x = Nombre, y = Edad)) +
geom_line( color="#69b3a2", size = 2, alpha = 0.9, linetype = 2) +
theme_ipsum() +
ggtitle("Evolution of something")
#
ggplot(miData, aes(x = Nombre, y = Edad)) +
geom_line( color="#69b3a2", size = 2, alpha = 0.9, linetype = 2) +
ggtitle("Evolution of something")
### Análisis exploratorio de datos con ggplot
ggplot(data = miData, aes(x = Nombre, y = Edad, group = 1)) +
geom_line(color = "red") + geom_point(color = "blue")
AMZN
head(AMZN)
View(AMZN)
### Análisis exploratorio de datos con ggplot
ggplot(data = miData, aes(x = Nombre, y = Edad, group = 1)) +
geom_line(color = "red") + geom_point(color = "blue") +
ggtitle("Edades")
geom_line(aes(y = AMZN$AMZN.Close) +
#
ggplot( ) +
geom_line(aes(y = AMZN$AMZN.Close) )
#****************************************************************************************
#install.packages("ggplot2")
#install.packages("dplyr")
#
library(ggplot2)
#****************************************************************************************
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_CIDE/Estadistica_II_2021/Estadistica-II-2021")
#****************************************************************************************
#install.packages("dplyr")
#
library(dplyr)
#****************************************************************************************
getwd()
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_CIDE/Estadistica_II_2021/Estadistica-II-2021")
getwd()
library(ggplot2)
#****************************************************************************************
getwd()
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_CIDE/Estadistica_II_2021/Estadistica-II-2021")
getwd()
args(rnorm)
rnorm(10, mean = 0, sd = 2)
# Importante (para Simulaciones que sean replicables):
#set.seed(10101) # Es una constate (la semilla) que fija la serie de numeros aleatorios
Z_t <- rnorm(1000, mean = 0, sd = 2)
mean(Z_t)
sd(Z_t)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
# ¿Cómo guardar la gráfica?
png("G_Z_t.jpg",  width = 900)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
dev.off()
# Importante (para Simulaciones que sean replicables):
set.seed(10101) # Es una constate (la semilla) que fija la serie de numeros aleatorios
Z_t <- rnorm(1000, mean = 0, sd = 2)
mean(Z_t)
sd(Z_t)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
# ¿Cómo guardar la gráfica?
png("G_Z_t.jpg",  width = 900)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
dev.off()
Moneda <- function(R, Time){
# R: es el conjunto del cual se extrae la muestra - espacio muestral
# Time: es el tamaño de la serie resultante
# S: es el tamaño de los subconjuntos generados
U_t <- replicate(Time,
sample(R, size = 1, replace = TRUE) )
# Esta es una funcion que genera un vector de resultados aleatorios de los posibles en
# el espacio muestral, tomando muestras de tamaño 1
return(U_t)
}
Resultados <- c(-1, 1)
#
Periodos <- 10000
# Creamos un data frame de nombre "U" con una columna llamada "Tiempo"
U <- data.frame(Tiempo = c(1:Periodos))
U$U_t <- Moneda( Resultados, Periodos )
#
mu = mean(U$U_t)
mu
#
S2 = var(U$U_t)
S2
# Agregamos al data frame una columna SU_t que llenamos de ceros (0)
U$SU_t <- replicate(Periodos, 0)
View(U)
# El siguiente ciclo recorre el data frame para ir acumulando los valores de U_t
# y colocando el valor acumulado en SU_t
for(i in 1:Periodos){
U$SU_t[i] <- sum( U$U_t[1:i] )
}
View(U)
# GRÁFICA
ggplot(data = U, aes( x = Tiempo, y = SU_t) ) +
geom_line(size = 0.5, color = "darkblue") +
#geom_point(size = 1.0, color = "darkblue") +
#theme_bw() +
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Xt") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Gráfica de la serie de tiempo Xt",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia. \nNotas: Simulación del lanzamiento de una moneda."
)
# GRÁFICA
ggplot(data = U, aes( x = Tiempo, y = SU_t) ) +
geom_line(size = 0.5, color = "darkblue") +
#geom_point(size = 1.0, color = "darkblue") +
#theme_bw() +
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Xt") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Gráfica de la serie de lannzamientos de una moneda",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia. \nNotas: Simulación del lanzamiento de una moneda."
)
ggsave("Lanzamiento_Moneda.png", width = 30, height = 15, units = "cm")
# Utilizaremos una función guardada en un archivo a parte
# Llamamos a la función:
source("Caminata.R")
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_CIDE/Estadistica_II_2021/Estadistica-II-2021/R")
getwd()
args(rnorm)
rnorm(10, mean = 0, sd = 2)
# Importante (para Simulaciones que sean replicables):
set.seed(10101) # Es una constate (la semilla) que fija la serie de numeros aleatorios
Z_t <- rnorm(1000, mean = 0, sd = 2)
mean(Z_t)
sd(Z_t)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
# ¿Cómo guardar la gráfica?
png("G_Z_t.jpg",  width = 900)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
dev.off()
Moneda <- function(R, Time){
# R: es el conjunto del cual se extrae la muestra - espacio muestral
# Time: es el tamaño de la serie resultante
# S: es el tamaño de los subconjuntos generados
U_t <- replicate(Time,
sample(R, size = 1, replace = TRUE) )
# Esta es una funcion que genera un vector de resultados aleatorios de los posibles en
# el espacio muestral, tomando muestras de tamaño 1
return(U_t)
}
Resultados <- c(-1, 1)
#
Periodos <- 10000
# Creamos un data frame de nombre "U" con una columna llamada "Tiempo"
U <- data.frame(Tiempo = c(1:Periodos))
U$U_t <- Moneda( Resultados, Periodos )
#
mu = mean(U$U_t)
mu
#
S2 = var(U$U_t)
S2
# Agregamos al data frame una columna SU_t que llenamos de ceros (0)
U$SU_t <- replicate(Periodos, 0)
View(U)
# El siguiente ciclo recorre el data frame para ir acumulando los valores de U_t
# y colocando el valor acumulado en SU_t
for(i in 1:Periodos){
U$SU_t[i] <- sum( U$U_t[1:i] )
}
View(U)
# GRÁFICA
ggplot(data = U, aes( x = Tiempo, y = SU_t) ) +
geom_line(size = 0.5, color = "darkblue") +
#geom_point(size = 1.0, color = "darkblue") +
#theme_bw() +
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Xt") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Gráfica de la serie de lannzamientos de una moneda",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia. \nNotas: Simulación del lanzamiento de una moneda."
)
ggsave("Lanzamiento_Moneda.png", width = 30, height = 15, units = "cm")
# Utilizaremos una función guardada en un archivo a parte
# Llamamos a la función:
source("Caminata.R")
# Definimos argumentos de la función
Opciones <- c(-1, 1)
#
Soporte <- 10000
# Vamos a réplicar el proceso con estos parámetros
Rango <- 200
#
Caminos <- 10
for(i in 1:Caminos){
TT <- data.matrix(data.frame(Caminata(Opciones, Soporte)[1]))
#
G_t <- data.matrix(data.frame(Caminata(Opciones, Soporte)[2]))
#
plot(TT, G_t, col = "blue", type = "l", ylab = "Ganancias", xlab = "Tiempo", ylim = c(-Rango,Rango))
#
par(new = TRUE)
#
i <- i +1
}
#
par(new = FALSE)
